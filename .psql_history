select * from roche_users;
select * from wyeth_users;
\q
select * from roche_users;
select * from roche_roles;
select role,accounts from roche_roleses;
select * from roche_roles;
select id,role,accounts from roche_roleses;
select id,role,accounts from TABLE roche_roleses;
select id,role,accounts from roche_roles;
select * from roche_users;
select id,user,role from roche_users;
select id,user,role from roche_user;
select * from roche_users;
select id,login,role roche_users NATURAL JOIN roche_roles;
select id,login,role roche_users LEFT JOIN roche_roles;
select id,login,role roche_users LEFT JOIN ON (roche_roles.id = site_role_id) roche_roles;
select id,login,role roche_users JOIN ON (roche_roles.id = site_role_id) roche_roles;
\q
\?
\set
\q
select * from wyeth_users;
select * from roche_users;
select login,password,site_role_id from roche_users;
\dt
\dt formularyentryupdates
\dt
\dt pg_stat_user_tables
select * from formularyentryupdates;
\e
select count(*) from formularyentryupdates;
\g
\x
\g
\e
select * from formularyentryupdates;
\e
select * from formularyentryupdates ORDER BY activedate;
select * ffuser;
\e
SELECT FROM * ffuser;
select * from ffuser;
\e
	 SELECT unioned_table.* FROM 	 (		   				     		SELECT		(case WHEN hp.healthplantypefid in (1,2,4,8,9,11) THEN 'Commercial'			  WHEN hp.healthplantypefid in (3,10) THEN 'Medicaid'		  	  WHEN hp.healthplantypefid in (5,6,7) THEN 'Medicare'		  end) as segment,	  (case WHEN hp.healthplantypefid in (1,2,4,8,9,11) THEN 1	  			  WHEN hp.healthplantypefid in (3,10) THEN 3	  		  	  WHEN hp.healthplantypefid in (5,6,7) THEN 2	  		  end) as sort_order,		COALESCE(SUM(			CASE 			WHEN 				fe.tierFid not in (8, 9)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS formularyCount,		COALESCE(SUM(			CASE 			WHEN 				fe.tierFid IN (1,2,3,4,5,6,7)				AND pa.id IS NULL 				and st.id IS NULL				AND fe.reasoncodefid not in (21,22)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS unrestrictedCount,		COALESCE(SUM(CASE 			WHEN 				(						(pa.id IS not NULL 						or st.id IS not NULL)						and fe.tierfid !=10 				)				OR fe.reasoncodefid in (21,22)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS restrictedCount,			COALESCE(SUM(CASE 				WHEN 				   fe.tierFid=10									THEN 					hpl.lives 				ELSE 					0 				END				),0) AS not_covered_count,		COALESCE(SUM(			CASE 			WHEN 				(fe.tierFid IN (1,2)				  OR (fe.tierFid = 3 AND (f.t3_preferred = 1 OR fe.tierFid = f.preferred_brand_tier_id ))				)			AND pa.id IS NULL 			and st.id IS NULL			AND fe.reasoncodefid not in (21,22)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS t2_count,		COALESCE(SUM(			CASE 			WHEN 			fe.tierFid = 3 AND (f.t3_preferred != 1 OR fe.tierFid != f.preferred_brand_tier_id )			AND  pa.id IS NULL 			and st.id IS NULL			AND fe.reasoncodefid not in (21,22)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS t3_count,			COALESCE(SUM(			CASE 			WHEN 				fe.tierFid between 4 and 7			AND pa.id IS NULL 			and st.id IS NULL			AND fe.reasoncodefid not in (21,22)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS t4_count				FROM					HealthPlan hp				INNER JOIN					Formulary f ON hp.formularyfid = f.id				INNER JOIN					FormularyEntry fe ON hp.formularyFid = fe.formularyFid				INNER JOIN					Drug d ON fe.drugFid = d.id									LEFT OUTER JOIN						(SELECT healthplanfid, statefid, COALESCE(SUM(lives),0) AS lives							FROM healthplan_countylives							GROUP BY healthplanfid, statefid						) hpl ON hp.id = hpl.healthplanfid									LEFT OUTER JOIN					FormularyEntryQualifier pa ON fe.id = pa.formularyEntryFid AND pa.qualifierfid = 2				LEFT OUTER JOIN					FormularyEntryQualifier st ON fe.id = st.formularyEntryFid AND st.qualifierfid = 3				WHERE					hp.isActive IS TRUE					and hp.healthplantypefid != 12									AND fe.drugFid IN (1326)				GROUP BY					segment, sort_order				UNION				SELECT		  		'Combined' as segment,				4 as sort_order,				COALESCE(SUM(					CASE 					WHEN 						fe.tierFid not in (8, 9)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS formularyCount,				COALESCE(SUM(					CASE 					WHEN 						fe.tierFid IN (1,2,3,4,5,6,7)					    AND pa.id IS NULL 						and st.id IS NULL						AND fe.reasoncodefid not in (21,22)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS unrestrictedCount,				COALESCE(SUM(CASE 					WHEN  					(					 ( pa.id IS not NULL or st.id IS not NULL)												and fe.tierfid !=10 )						 OR fe.reasoncodefid in (21,22)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS restrictedCount,					COALESCE(SUM(CASE 						WHEN 						   fe.tierFid=10											THEN 							hpl.lives 						ELSE 							0 						END						),0) AS not_covered_count,				COALESCE(SUM(					CASE 					WHEN 						(fe.tierFid IN (1,2)   OR (fe.tierFid = 3 AND (f.t3_preferred = 1 OR fe.tierFid = f.preferred_brand_tier_id ))						)						AND pa.id IS NULL 						and st.id IS NULL						AND fe.reasoncodefid not in (21,22)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS t2_count,				COALESCE(SUM(					CASE 					WHEN 						(fe.tierFid = 3 AND (f.t3_preferred != 1 OR fe.tierFid != f.preferred_brand_tier_id ))						AND pa.id IS NULL 						and st.id IS NULL						AND fe.reasoncodefid not in (21,22)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS t3_count,					COALESCE(SUM(					CASE 					WHEN 						fe.tierFid between 4 and 7					AND pa.id IS NULL 					and st.id IS NULL					AND fe.reasoncodefid not in (21,22)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS t4_count						FROM							HealthPlan hp						INNER JOIN							Formulary f ON hp.formularyfid = f.id						INNER JOIN							FormularyEntry fe ON hp.formularyFid = fe.formularyFid						INNER JOIN							Drug d ON fe.drugFid = d.id													LEFT OUTER JOIN								(SELECT healthplanfid, statefid, COALESCE(SUM(lives),0) AS lives									FROM healthplan_countylives									GROUP BY healthplanfid, statefid								) hpl ON hp.id = hpl.healthplanfid													LEFT OUTER JOIN							FormularyEntryQualifier pa ON fe.id = pa.formularyEntryFid AND pa.qualifierfid = 2						LEFT OUTER JOIN							FormularyEntryQualifier st ON fe.id = st.formularyEntryFid AND st.qualifierfid = 3						WHERE							hp.isActive IS TRUE							and hp.healthplantypefid not in (12,3,10 )													AND fe.drugFid IN (1326 )						GROUP BY							segment, sort_order		   		) unioned_table		   		ORDER BY unioned_table.sort_order;
\e
-- comments?SELECT unioned_table.* FROM 	 (		   				     		SELECT		(case WHEN hp.healthplantypefid in (1,2,4,8,9,11) THEN 'Commercial'			  WHEN hp.healthplantypefid in (3,10) THEN 'Medicaid'		  	  WHEN hp.healthplantypefid in (5,6,7) THEN 'Medicare'		  end) as segment,	  (case WHEN hp.healthplantypefid in (1,2,4,8,9,11) THEN 1	  			  WHEN hp.healthplantypefid in (3,10) THEN 3	  		  	  WHEN hp.healthplantypefid in (5,6,7) THEN 2	  		  end) as sort_order,		COALESCE(SUM(			CASE 			WHEN 				fe.tierFid not in (8, 9)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS formularyCount,		COALESCE(SUM(			CASE 			WHEN 				fe.tierFid IN (1,2,3,4,5,6,7)				AND pa.id IS NULL 				and st.id IS NULL				AND fe.reasoncodefid not in (21,22)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS unrestrictedCount,		COALESCE(SUM(CASE 			WHEN 				(						(pa.id IS not NULL 						or st.id IS not NULL)						and fe.tierfid !=10 				)				OR fe.reasoncodefid in (21,22)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS restrictedCount,			COALESCE(SUM(CASE 				WHEN 				   fe.tierFid=10									THEN 					hpl.lives 				ELSE 					0 				END				),0) AS not_covered_count,		COALESCE(SUM(			CASE 			WHEN 				(fe.tierFid IN (1,2)				  OR (fe.tierFid = 3 AND (f.t3_preferred = 1 OR fe.tierFid = f.preferred_brand_tier_id ))				)			AND pa.id IS NULL 			and st.id IS NULL			AND fe.reasoncodefid not in (21,22)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS t2_count,		COALESCE(SUM(			CASE 			WHEN 			fe.tierFid = 3 AND (f.t3_preferred != 1 OR fe.tierFid != f.preferred_brand_tier_id )			AND  pa.id IS NULL 			and st.id IS NULL			AND fe.reasoncodefid not in (21,22)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS t3_count,			COALESCE(SUM(			CASE 			WHEN 				fe.tierFid between 4 and 7			AND pa.id IS NULL 			and st.id IS NULL			AND fe.reasoncodefid not in (21,22)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS t4_count				FROM					HealthPlan hp				INNER JOIN					Formulary f ON hp.formularyfid = f.id				INNER JOIN					FormularyEntry fe ON hp.formularyFid = fe.formularyFid				INNER JOIN					Drug d ON fe.drugFid = d.id									LEFT OUTER JOIN						(SELECT healthplanfid, statefid, COALESCE(SUM(lives),0) AS lives							FROM healthplan_countylives							GROUP BY healthplanfid, statefid						) hpl ON hp.id = hpl.healthplanfid									LEFT OUTER JOIN					FormularyEntryQualifier pa ON fe.id = pa.formularyEntryFid AND pa.qualifierfid = 2				LEFT OUTER JOIN					FormularyEntryQualifier st ON fe.id = st.formularyEntryFid AND st.qualifierfid = 3				WHERE					hp.isActive IS TRUE					and hp.healthplantypefid != 12									AND fe.drugFid IN (1326)				GROUP BY					segment, sort_order				UNION				SELECT		  		'Combined' as segment,				4 as sort_order,				COALESCE(SUM(					CASE 					WHEN 						fe.tierFid not in (8, 9)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS formularyCount,				COALESCE(SUM(					CASE 					WHEN 						fe.tierFid IN (1,2,3,4,5,6,7)					    AND pa.id IS NULL 						and st.id IS NULL						AND fe.reasoncodefid not in (21,22)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS unrestrictedCount,				COALESCE(SUM(CASE 					WHEN  					(					 ( pa.id IS not NULL or st.id IS not NULL)												and fe.tierfid !=10 )						 OR fe.reasoncodefid in (21,22)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS restrictedCount,					COALESCE(SUM(CASE 						WHEN 						   fe.tierFid=10											THEN 							hpl.lives 						ELSE 							0 						END						),0) AS not_covered_count,				COALESCE(SUM(					CASE 					WHEN 						(fe.tierFid IN (1,2)   OR (fe.tierFid = 3 AND (f.t3_preferred = 1 OR fe.tierFid = f.preferred_brand_tier_id ))						)						AND pa.id IS NULL 						and st.id IS NULL						AND fe.reasoncodefid not in (21,22)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS t2_count,				COALESCE(SUM(					CASE 					WHEN 						(fe.tierFid = 3 AND (f.t3_preferred != 1 OR fe.tierFid != f.preferred_brand_tier_id ))						AND pa.id IS NULL 						and st.id IS NULL						AND fe.reasoncodefid not in (21,22)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS t3_count,					COALESCE(SUM(					CASE 					WHEN 						fe.tierFid between 4 and 7					AND pa.id IS NULL 					and st.id IS NULL					AND fe.reasoncodefid not in (21,22)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS t4_count						FROM							HealthPlan hp						INNER JOIN							Formulary f ON hp.formularyfid = f.id						INNER JOIN							FormularyEntry fe ON hp.formularyFid = fe.formularyFid						INNER JOIN							Drug d ON fe.drugFid = d.id													LEFT OUTER JOIN								(SELECT healthplanfid, statefid, COALESCE(SUM(lives),0) AS lives									FROM healthplan_countylives									GROUP BY healthplanfid, statefid								) hpl ON hp.id = hpl.healthplanfid													LEFT OUTER JOIN							FormularyEntryQualifier pa ON fe.id = pa.formularyEntryFid AND pa.qualifierfid = 2						LEFT OUTER JOIN							FormularyEntryQualifier st ON fe.id = st.formularyEntryFid AND st.qualifierfid = 3						WHERE							hp.isActive IS TRUE							and hp.healthplantypefid not in (12,3,10 )													AND fe.drugFid IN (1326 )						GROUP BY							segment, sort_order		   		) unioned_table		   		ORDER BY unioned_table.sort_order;			SELECT				d.id,				d.webName,							COALESCE(SUM(1),0) AS formularyCount,							COALESCE(SUM(CASE fe.tierFid WHEN 1 THEN 1 ELSE 0 END),0) AS tierOne,				COALESCE(SUM(CASE fe.tierFid WHEN 2 THEN 1 ELSE 0 END),0) AS tierTwo,									COALESCE(SUM(CASE 								WHEN (1 = 0 OR (1 > 0 AND (f.preferred_brand_tier_id IS NULL OR f.preferred_brand_tier_id <> 3))) AND fe.tierFid = 3								THEN 1 								ELSE 0 								END),0) AS tierThree,					COALESCE(SUM(CASE 								WHEN 1 > 0 AND f.preferred_brand_tier_id = 3 AND fe.tierFid = 3								THEN 1 								ELSE 0 								END),0) AS tier3PB,					COALESCE(SUM(CASE 								WHEN (2 = 0 OR (2 > 0 AND (f.preferred_brand_tier_id IS NULL OR f.preferred_brand_tier_id <> 4))) AND fe.tierFid = 4								THEN 1 								ELSE 0 								END),0) AS tierFour,					COALESCE(SUM(CASE 								WHEN 2 > 0 AND f.preferred_brand_tier_id = 4 AND fe.tierFid = 4								THEN 1 								ELSE 0 								END),0) AS tier4PB,					COALESCE(SUM(CASE 								WHEN (3 = 0 OR (3 > 0 AND (f.preferred_brand_tier_id IS NULL OR f.preferred_brand_tier_id <> 5))) AND fe.tierFid = 5								THEN 1 								ELSE 0 								END),0) AS tierFive,					COALESCE(SUM(CASE 								WHEN 3 > 0 AND f.preferred_brand_tier_id = 5 AND fe.tierFid = 5								THEN 1 								ELSE 0 								END),0) AS tier5PB,					COALESCE(SUM(CASE 								WHEN (4 = 0 OR (4 > 0 AND (f.preferred_brand_tier_id IS NULL OR f.preferred_brand_tier_id <> 6))) AND fe.tierFid = 6								THEN 1 								ELSE 0 								END),0) AS tierSix,					COALESCE(SUM(CASE 								WHEN 4 > 0 AND f.preferred_brand_tier_id = 6 AND fe.tierFid = 6								THEN 1 								ELSE 0 								END),0) AS tier6PB,								COALESCE(SUM(CASE fe.tierFid WHEN 7 THEN 1 ELSE 0 END),0) AS tierSeven,				COALESCE(SUM(CASE WHEN fe.tierFid = 8 AND fe.reasoncodefid = 49 THEN 1 ELSE 0 END),0) AS zeroCopay,									COALESCE(SUM(CASE WHEN fe.tierFid = 8 AND fe.reasoncodefid <> 49 THEN 1 ELSE 0 END),0) AS notApplicable,								COALESCE(SUM(CASE fe.tierFid WHEN 10 THEN 1 ELSE 0 END),0) AS notCovered						FROM				HealthPlan hp			INNER JOIN				Formulary f ON hp.formularyfid = f.id			INNER JOIN				FormularyEntry fe ON f.id = fe.formularyFid			INNER JOIN				Drug d ON fe.drugFid = d.id					WHERE				hp.isActive IS TRUE							AND fe.drugFid IN (1326)			GROUP BY				d.id, d.webName			ORDER BY				webName;
\e
\q
\e
\q
\e
			SELECT				d.id,				d.webName,							COALESCE(SUM(1),0) AS formularyCount,							COALESCE(SUM(CASE fe.tierFid WHEN 1 THEN 1 ELSE 0 END),0) AS tierOne,				COALESCE(SUM(CASE fe.tierFid WHEN 2 THEN 1 ELSE 0 END),0) AS tierTwo,									COALESCE(SUM(CASE 								WHEN (1 = 0 OR (1 > 0 AND (f.preferred_brand_tier_id IS NULL OR f.preferred_brand_tier_id <> 3))) AND fe.tierFid = 3								THEN 1 								ELSE 0 								END),0) AS tierThree,					COALESCE(SUM(CASE 								WHEN 1 > 0 AND f.preferred_brand_tier_id = 3 AND fe.tierFid = 3								THEN 1 								ELSE 0 								END),0) AS tier3PB,					COALESCE(SUM(CASE 								WHEN (2 = 0 OR (2 > 0 AND (f.preferred_brand_tier_id IS NULL OR f.preferred_brand_tier_id <> 4))) AND fe.tierFid = 4								THEN 1 								ELSE 0 								END),0) AS tierFour,					COALESCE(SUM(CASE 								WHEN 2 > 0 AND f.preferred_brand_tier_id = 4 AND fe.tierFid = 4								THEN 1 								ELSE 0 								END),0) AS tier4PB,					COALESCE(SUM(CASE 								WHEN (3 = 0 OR (3 > 0 AND (f.preferred_brand_tier_id IS NULL OR f.preferred_brand_tier_id <> 5))) AND fe.tierFid = 5								THEN 1 								ELSE 0 								END),0) AS tierFive,					COALESCE(SUM(CASE 								WHEN 3 > 0 AND f.preferred_brand_tier_id = 5 AND fe.tierFid = 5								THEN 1 								ELSE 0 								END),0) AS tier5PB,					COALESCE(SUM(CASE 								WHEN (4 = 0 OR (4 > 0 AND (f.preferred_brand_tier_id IS NULL OR f.preferred_brand_tier_id <> 6))) AND fe.tierFid = 6								THEN 1 								ELSE 0 								END),0) AS tierSix,					COALESCE(SUM(CASE 								WHEN 4 > 0 AND f.preferred_brand_tier_id = 6 AND fe.tierFid = 6								THEN 1 								ELSE 0 								END),0) AS tier6PB,								COALESCE(SUM(CASE fe.tierFid WHEN 7 THEN 1 ELSE 0 END),0) AS tierSeven,				COALESCE(SUM(CASE WHEN fe.tierFid = 8 AND fe.reasoncodefid = 49 THEN 1 ELSE 0 END),0) AS zeroCopay,									COALESCE(SUM(CASE WHEN fe.tierFid = 8 AND fe.reasoncodefid <> 49 THEN 1 ELSE 0 END),0) AS notApplicable,								COALESCE(SUM(CASE fe.tierFid WHEN 10 THEN 1 ELSE 0 END),0) AS notCovered						FROM				HealthPlan hp			INNER JOIN				Formulary f ON hp.formularyfid = f.id			INNER JOIN				FormularyEntry fe ON f.id = fe.formularyFid			INNER JOIN				Drug d ON fe.drugFid = d.id					WHERE				hp.isActive IS TRUE							AND fe.drugFid IN (1326)			GROUP BY				d.id, d.webName			ORDER BY				webName;	 SELECT unioned_table.* FROM 	 (		   				     		SELECT		(case WHEN hp.healthplantypefid in (1,2,4,8,9,11) THEN 'Commercial'			  WHEN hp.healthplantypefid in (3,10) THEN 'Medicaid'		  	  WHEN hp.healthplantypefid in (5,6,7) THEN 'Medicare'		  end) as segment,	  (case WHEN hp.healthplantypefid in (1,2,4,8,9,11) THEN 1	  			  WHEN hp.healthplantypefid in (3,10) THEN 3	  		  	  WHEN hp.healthplantypefid in (5,6,7) THEN 2	  		  end) as sort_order,		COALESCE(SUM(			CASE 			WHEN 				fe.tierFid not in (8, 9)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS formularyCount,		COALESCE(SUM(			CASE 			WHEN 				fe.tierFid IN (1,2,3,4,5,6,7)				AND pa.id IS NULL 				and st.id IS NULL				AND fe.reasoncodefid not in (21,22)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS unrestrictedCount,		COALESCE(SUM(CASE 			WHEN 				(						(pa.id IS not NULL 						or st.id IS not NULL)						and fe.tierfid !=10 				)				OR fe.reasoncodefid in (21,22)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS restrictedCount,			COALESCE(SUM(CASE 				WHEN 				   fe.tierFid=10									THEN 					hpl.lives 				ELSE 					0 				END				),0) AS not_covered_count,		COALESCE(SUM(			CASE 			WHEN 				(fe.tierFid IN (1,2)				  OR (fe.tierFid = 3 AND (f.t3_preferred = 1 OR fe.tierFid = f.preferred_brand_tier_id ))				)			AND pa.id IS NULL 			and st.id IS NULL			AND fe.reasoncodefid not in (21,22)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS t2_count,		COALESCE(SUM(			CASE 			WHEN 			fe.tierFid = 3 AND (f.t3_preferred != 1 OR fe.tierFid != f.preferred_brand_tier_id )			AND  pa.id IS NULL 			and st.id IS NULL			AND fe.reasoncodefid not in (21,22)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS t3_count,			COALESCE(SUM(			CASE 			WHEN 				fe.tierFid between 4 and 7			AND pa.id IS NULL 			and st.id IS NULL			AND fe.reasoncodefid not in (21,22)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS t4_count				FROM					HealthPlan hp				INNER JOIN					Formulary f ON hp.formularyfid = f.id				INNER JOIN					FormularyEntry fe ON hp.formularyFid = fe.formularyFid				INNER JOIN					Drug d ON fe.drugFid = d.id									LEFT OUTER JOIN						(SELECT healthplanfid, statefid, COALESCE(SUM(lives),0) AS lives							FROM healthplan_countylives							GROUP BY healthplanfid, statefid						) hpl ON hp.id = hpl.healthplanfid									LEFT OUTER JOIN					FormularyEntryQualifier pa ON fe.id = pa.formularyEntryFid AND pa.qualifierfid = 2				LEFT OUTER JOIN					FormularyEntryQualifier st ON fe.id = st.formularyEntryFid AND st.qualifierfid = 3				WHERE					hp.isActive IS TRUE					and hp.healthplantypefid != 12									AND fe.drugFid IN (1326)				GROUP BY					segment, sort_order				UNION				SELECT		  		'Combined' as segment,				4 as sort_order,				COALESCE(SUM(					CASE 					WHEN 						fe.tierFid not in (8, 9)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS formularyCount,				COALESCE(SUM(					CASE 					WHEN 						fe.tierFid IN (1,2,3,4,5,6,7)					    AND pa.id IS NULL 						and st.id IS NULL						AND fe.reasoncodefid not in (21,22)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS unrestrictedCount,				COALESCE(SUM(CASE 					WHEN  					(					 ( pa.id IS not NULL or st.id IS not NULL)												and fe.tierfid !=10 )						 OR fe.reasoncodefid in (21,22)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS restrictedCount,					COALESCE(SUM(CASE 						WHEN 						   fe.tierFid=10											THEN 							hpl.lives 						ELSE 							0 						END						),0) AS not_covered_count,				COALESCE(SUM(					CASE 					WHEN 						(fe.tierFid IN (1,2)   OR (fe.tierFid = 3 AND (f.t3_preferred = 1 OR fe.tierFid = f.preferred_brand_tier_id ))						)						AND pa.id IS NULL 						and st.id IS NULL						AND fe.reasoncodefid not in (21,22)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS t2_count,				COALESCE(SUM(					CASE 					WHEN 						(fe.tierFid = 3 AND (f.t3_preferred != 1 OR fe.tierFid != f.preferred_brand_tier_id ))						AND pa.id IS NULL 						and st.id IS NULL						AND fe.reasoncodefid not in (21,22)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS t3_count,					COALESCE(SUM(					CASE 					WHEN 						fe.tierFid between 4 and 7					AND pa.id IS NULL 					and st.id IS NULL					AND fe.reasoncodefid not in (21,22)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS t4_count						FROM							HealthPlan hp						INNER JOIN							Formulary f ON hp.formularyfid = f.id						INNER JOIN							FormularyEntry fe ON hp.formularyFid = fe.formularyFid						INNER JOIN							Drug d ON fe.drugFid = d.id													LEFT OUTER JOIN								(SELECT healthplanfid, statefid, COALESCE(SUM(lives),0) AS lives									FROM healthplan_countylives									GROUP BY healthplanfid, statefid								) hpl ON hp.id = hpl.healthplanfid													LEFT OUTER JOIN							FormularyEntryQualifier pa ON fe.id = pa.formularyEntryFid AND pa.qualifierfid = 2						LEFT OUTER JOIN							FormularyEntryQualifier st ON fe.id = st.formularyEntryFid AND st.qualifierfid = 3						WHERE							hp.isActive IS TRUE							and hp.healthplantypefid not in (12,3,10 )													AND fe.drugFid IN (1326 )						GROUP BY							segment, sort_order		   		) unioned_table		   		ORDER BY unioned_table.sort_order;
\x
\e
-- comment?			SELECT				d.id,				d.webName,							COALESCE(SUM(1),0) AS formularyCount,							COALESCE(SUM(CASE fe.tierFid WHEN 1 THEN 1 ELSE 0 END),0) AS tierOne,				COALESCE(SUM(CASE fe.tierFid WHEN 2 THEN 1 ELSE 0 END),0) AS tierTwo,									COALESCE(SUM(CASE 								WHEN (1 = 0 OR (1 > 0 AND (f.preferred_brand_tier_id IS NULL OR f.preferred_brand_tier_id <> 3))) AND fe.tierFid = 3								THEN 1 								ELSE 0 								END),0) AS tierThree,					COALESCE(SUM(CASE 								WHEN 1 > 0 AND f.preferred_brand_tier_id = 3 AND fe.tierFid = 3								THEN 1 								ELSE 0 								END),0) AS tier3PB,					COALESCE(SUM(CASE 								WHEN (2 = 0 OR (2 > 0 AND (f.preferred_brand_tier_id IS NULL OR f.preferred_brand_tier_id <> 4))) AND fe.tierFid = 4								THEN 1 								ELSE 0 								END),0) AS tierFour,					COALESCE(SUM(CASE 								WHEN 2 > 0 AND f.preferred_brand_tier_id = 4 AND fe.tierFid = 4								THEN 1 								ELSE 0 								END),0) AS tier4PB,					COALESCE(SUM(CASE 								WHEN (3 = 0 OR (3 > 0 AND (f.preferred_brand_tier_id IS NULL OR f.preferred_brand_tier_id <> 5))) AND fe.tierFid = 5								THEN 1 								ELSE 0 								END),0) AS tierFive,					COALESCE(SUM(CASE 								WHEN 3 > 0 AND f.preferred_brand_tier_id = 5 AND fe.tierFid = 5								THEN 1 								ELSE 0 								END),0) AS tier5PB,					COALESCE(SUM(CASE 								WHEN (4 = 0 OR (4 > 0 AND (f.preferred_brand_tier_id IS NULL OR f.preferred_brand_tier_id <> 6))) AND fe.tierFid = 6								THEN 1 								ELSE 0 								END),0) AS tierSix,					COALESCE(SUM(CASE 								WHEN 4 > 0 AND f.preferred_brand_tier_id = 6 AND fe.tierFid = 6								THEN 1 								ELSE 0 								END),0) AS tier6PB,								COALESCE(SUM(CASE fe.tierFid WHEN 7 THEN 1 ELSE 0 END),0) AS tierSeven,				COALESCE(SUM(CASE WHEN fe.tierFid = 8 AND fe.reasoncodefid = 49 THEN 1 ELSE 0 END),0) AS zeroCopay,									COALESCE(SUM(CASE WHEN fe.tierFid = 8 AND fe.reasoncodefid <> 49 THEN 1 ELSE 0 END),0) AS notApplicable,								COALESCE(SUM(CASE fe.tierFid WHEN 10 THEN 1 ELSE 0 END),0) AS notCovered						FROM				HealthPlan hp			INNER JOIN				Formulary f ON hp.formularyfid = f.id			INNER JOIN				FormularyEntry fe ON f.id = fe.formularyFid			INNER JOIN				Drug d ON fe.drugFid = d.id					WHERE				hp.isActive IS TRUE							AND fe.drugFid IN (1326)			GROUP BY				d.id, d.webName			ORDER BY				webName;	 SELECT unioned_table.* FROM 	 (		   				     		SELECT		(case WHEN hp.healthplantypefid in (1,2,4,8,9,11) THEN 'Commercial'			  WHEN hp.healthplantypefid in (3,10) THEN 'Medicaid'		  	  WHEN hp.healthplantypefid in (5,6,7) THEN 'Medicare'		  end) as segment,	  (case WHEN hp.healthplantypefid in (1,2,4,8,9,11) THEN 1	  			  WHEN hp.healthplantypefid in (3,10) THEN 3	  		  	  WHEN hp.healthplantypefid in (5,6,7) THEN 2	  		  end) as sort_order,		COALESCE(SUM(			CASE 			WHEN 				fe.tierFid not in (8, 9)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS formularyCount,		COALESCE(SUM(			CASE 			WHEN 				fe.tierFid IN (1,2,3,4,5,6,7)				AND pa.id IS NULL 				and st.id IS NULL				AND fe.reasoncodefid not in (21,22)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS unrestrictedCount,		COALESCE(SUM(CASE 			WHEN 				(						(pa.id IS not NULL 						or st.id IS not NULL)						and fe.tierfid !=10 				)				OR fe.reasoncodefid in (21,22)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS restrictedCount,			COALESCE(SUM(CASE 				WHEN 				   fe.tierFid=10									THEN 					hpl.lives 				ELSE 					0 				END				),0) AS not_covered_count,		COALESCE(SUM(			CASE 			WHEN 				(fe.tierFid IN (1,2)				  OR (fe.tierFid = 3 AND (f.t3_preferred = 1 OR fe.tierFid = f.preferred_brand_tier_id ))				)			AND pa.id IS NULL 			and st.id IS NULL			AND fe.reasoncodefid not in (21,22)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS t2_count,		COALESCE(SUM(			CASE 			WHEN 			fe.tierFid = 3 AND (f.t3_preferred != 1 OR fe.tierFid != f.preferred_brand_tier_id )			AND  pa.id IS NULL 			and st.id IS NULL			AND fe.reasoncodefid not in (21,22)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS t3_count,			COALESCE(SUM(			CASE 			WHEN 				fe.tierFid between 4 and 7			AND pa.id IS NULL 			and st.id IS NULL			AND fe.reasoncodefid not in (21,22)			THEN 				hpl.lives 			ELSE 				0 			END			),0) AS t4_count				FROM					HealthPlan hp				INNER JOIN					Formulary f ON hp.formularyfid = f.id				INNER JOIN					FormularyEntry fe ON hp.formularyFid = fe.formularyFid				INNER JOIN					Drug d ON fe.drugFid = d.id									LEFT OUTER JOIN						(SELECT healthplanfid, statefid, COALESCE(SUM(lives),0) AS lives							FROM healthplan_countylives							GROUP BY healthplanfid, statefid						) hpl ON hp.id = hpl.healthplanfid									LEFT OUTER JOIN					FormularyEntryQualifier pa ON fe.id = pa.formularyEntryFid AND pa.qualifierfid = 2				LEFT OUTER JOIN					FormularyEntryQualifier st ON fe.id = st.formularyEntryFid AND st.qualifierfid = 3				WHERE					hp.isActive IS TRUE					and hp.healthplantypefid != 12									AND fe.drugFid IN (1326)				GROUP BY					segment, sort_order				UNION				SELECT		  		'Combined' as segment,				4 as sort_order,				COALESCE(SUM(					CASE 					WHEN 						fe.tierFid not in (8, 9)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS formularyCount,				COALESCE(SUM(					CASE 					WHEN 						fe.tierFid IN (1,2,3,4,5,6,7)					    AND pa.id IS NULL 						and st.id IS NULL						AND fe.reasoncodefid not in (21,22)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS unrestrictedCount,				COALESCE(SUM(CASE 					WHEN  					(					 ( pa.id IS not NULL or st.id IS not NULL)												and fe.tierfid !=10 )						 OR fe.reasoncodefid in (21,22)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS restrictedCount,					COALESCE(SUM(CASE 						WHEN 						   fe.tierFid=10											THEN 							hpl.lives 						ELSE 							0 						END						),0) AS not_covered_count,				COALESCE(SUM(					CASE 					WHEN 						(fe.tierFid IN (1,2)   OR (fe.tierFid = 3 AND (f.t3_preferred = 1 OR fe.tierFid = f.preferred_brand_tier_id ))						)						AND pa.id IS NULL 						and st.id IS NULL						AND fe.reasoncodefid not in (21,22)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS t2_count,				COALESCE(SUM(					CASE 					WHEN 						(fe.tierFid = 3 AND (f.t3_preferred != 1 OR fe.tierFid != f.preferred_brand_tier_id ))						AND pa.id IS NULL 						and st.id IS NULL						AND fe.reasoncodefid not in (21,22)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS t3_count,					COALESCE(SUM(					CASE 					WHEN 						fe.tierFid between 4 and 7					AND pa.id IS NULL 					and st.id IS NULL					AND fe.reasoncodefid not in (21,22)					THEN 						hpl.lives 					ELSE 						0 					END					),0) AS t4_count						FROM							HealthPlan hp						INNER JOIN							Formulary f ON hp.formularyfid = f.id						INNER JOIN							FormularyEntry fe ON hp.formularyFid = fe.formularyFid						INNER JOIN							Drug d ON fe.drugFid = d.id													LEFT OUTER JOIN								(SELECT healthplanfid, statefid, COALESCE(SUM(lives),0) AS lives									FROM healthplan_countylives									GROUP BY healthplanfid, statefid								) hpl ON hp.id = hpl.healthplanfid													LEFT OUTER JOIN							FormularyEntryQualifier pa ON fe.id = pa.formularyEntryFid AND pa.qualifierfid = 2						LEFT OUTER JOIN							FormularyEntryQualifier st ON fe.id = st.formularyEntryFid AND st.qualifierfid = 3						WHERE							hp.isActive IS TRUE							and hp.healthplantypefid not in (12,3,10 )													AND fe.drugFid IN (1326 )						GROUP BY							segment, sort_order		   		) unioned_table		   		ORDER BY unioned_table.sort_order;
\e
\q
\dt
select * from drug where drug = 1326;
\e
select * from drug where id = 1326;
\x
select * from drug where id = 1326;
\q
select * from pg_tables WHERE tablename LIKE '%session%';
\q
